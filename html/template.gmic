#@gmic
#--------------------------------------------------------------------
#
# This file illustrates how to set up an external filter source
# for the G'MIC plug-in for GIMP.
# It contains toy filters in various locations to show how things are
# working. This should be a good basis for your own filters.
#
#---------------------------------------------------------------------
# ^ Remove this header for final filter sources ! ^
# ^ But keep the first line (mandatory), it identifies the file as an
# external filter source ^

#----------------------------------------------------------------------
#
#  File        : template.gmic   <-- Put your filename here.
#                ( G'MIC commands file )
#
#  Description : A template file for external filter sources.
#
#  Location    : If you are using the G'MIC plug-in for GIMP, and made
#                a filter update via Internet, a copy of this file
#                should be located in the folder :
#
#                  $HOME/.gmic_def.xxxx    (on Unix-based OS).
#                  %APPDATA/gmic_def.xxxx  (on Windows-based OS).
#
#  Copyright   : John Doe
#                ( http://en.wikipedia.org/wiki/John_Doe/ )
#
#  License     : CeCILL v2.0
#                ( http://www.cecill.info/licences/Licence_CeCILL_V2-en.html )
#
#  This software is governed by the CeCILL  license under French law and
#  abiding by the rules of distribution of free software.  You can  use,
#  modify and/ or redistribute the software under the terms of the CeCILL
#  license as circulated by CEA, CNRS and INRIA at the following URL
#  "http://www.cecill.info".
#
#  As a counterpart to the access to the source code and  rights to copy,
#  modify and redistribute granted by the license, users are provided only
#  with a limited warranty  and the software's author,  the holder of the
#  economic rights,  and the successive licensors  have only  limited
#  liability.
#
#  In this respect, the user's attention is drawn to the risks associated
#  with loading,  using,  modifying and/or developing or reproducing the
#  software by the user in light of its specific status of free software,
#  that may mean  that it is complicated to manipulate,  and  that  also
#  therefore means  that it is reserved for developers  and  experienced
#  professionals having in-depth computer knowledge. Users are therefore
#  encouraged to load and test the software's suitability as regards their
#  requirements in conditions enabling the security of their systems and/or
#  data to be ensured and,  more generally, to use and operate it in the
#  same conditions as regards security.
#
#  The fact that you are presently reading this means that you have had
#  knowledge of the CeCILL license and that you accept its terms.
#
#------------------------------------------------------------------------------
# ^ This is a regular header. Of course you can change the License with a more
# or less restrictive rules (non-commercial for instance).

#------ Syntax rules for a G'MIC command file :
#
#*** General syntax :
#
# - Each line starting with 'command_name :' starts a new definition of the G'MIC custom command '-command_name'.
# - Each line starting with '#' is a comment line.
# - Any other line is considered as the continuation of a previously started G'MIC custom command.
#
#*** Specific rules for 'gmic_gimp' (plug-in for GIMP) :
#
# - A comment line starting with '#@gimp' will be parsed by the GIMP plug-in to define the filters tree.
# - A comment line starting with '#@gimp_xx' will define a filter only for a specific language 'xx'
#    (e.g. 'en','fr'...).
# - More precisely, the syntax of a '#@gimp' comment line is :
#
#    '#@gimp Folder name'
#
# or
#
#    '#@gimp Command name : command, preview_command, parameter = typedef, parameter2 = typedef'
#    '#@gimp : parameter3 = typedef, parameter4 = typedef ...., parameterN = typedef'
#
#   where :
#
#      'command' is the G'MIC command name called to process the image.
#
#      'preview_command' is the G'MIC command name called to process the preview.
#
#           Note that you can optionally specify a float-valued factor>=0 between parentheses at the end of
#           the 'preview_command' to force the default zoom factor used by the GIMP preview for this filter.
#           Use (0) for a 1:1 preview, (1) for previewing the whole image, (2) for 1/2 image and so on...
#
#      'parameter = typedef' tells about the names, types and default values of the filter parameters.
#
#           'typedef' can be :
#
#      _ 'float(default_value,min_value,max_value)'       : Add a float-valued parameter (as a GUI float slider).
#      _ 'int(default_value,min_value,max_value)'         : Add a integer parameter (as a GUI integer slider).
#      _ 'bool(default_value={ 0 | 1 | false | true })'   : Add a boolean parameter (0 or 1) (as a GUI checkbutton).
#      _ 'choice(_default_indice,Choice0,..,ChoiceN)'     : Add a integer parameter (as a GUI combobox).
#      _ 'text(_is_multiline={ 0 | 1 },_default text)'    : Add a single or multi-line text parameter (as a GUI text entry).
#      _ 'file(_default_filename)'                        : Add a filename parameter (as a GUI filechooser).
#      _ 'folder(_default_foldername)'                    : Add a foldername parameter (as a GUI folderchooser).
#      _ 'color(defaultR,defaultG,defaultB,_defaultA)'    : Add R,G,B[,A] parameters (as a GUI colorchooser).
#      _ 'note(_label)'                                   : Display a label, but do not add a new parameter.
#      _ 'link(_alignement,_label,URL)'                   : Display a label that link to a specified URL.
#      _ 'separator()'                                    : Display an horizontal separator.
#
#   Type separators '()' can be replaced by '[]' or '{}' if necessary (for instance if parentheses are required in
#   an argument of the typedef, e.g in a text). You can also replace 'typedef' by '_typedef' to tell the plug-in not
#   to update the image preview when the corresponding parameter is modified.
#
#   Use '_none_' as a special command or preview_command to tell the plug-in that the entry requires no G'MIC call.
#
#-----------------------------------------------------------------------------------------------------------------------


# The filters below will go the the 'Testing / John Doe' folder. This is a good 'standard' location
# for putting filters that are still in testing mode (of course, replace 'John Doe' by your own name !).
# Once considered as stable, such filters should be moved to one of the existing (considered as 'stable') folder
# (e.g. 'Artistics' or 'Enhancement', or put in a new folder name if no one correspond to the topic of the filters.

#------------------------------------
#@gimp <b>Testing</b>
#@gimp <i>John Doe</i>
#------------------------------------

#@gimp About : _none_, jdoe_about
#@gimp : note = note{"
#@gimp : <span foreground="purple">( <b>J</b>ohn Doe's <b>F</b>ilter <b>S</b>et for <b>G'MIC</b>)</span>\n\nis proposed to you by"}
#@gimp : note = link("John Doe","http://en.wikipedia.org/wiki/John_Doe/")
#@gimp : note = link{"( Affiliation )","http://www.affiliation_url.org"}
#@gimp : note = note{"\n"}
#@gimp : sep = separator()
#@gimp : note = note{"
#@gimp : The source code of this set of filters is available at :"}
#@gimp : note = link("http://www.filters_url.org/template.gmic")
#@gimp : "}
#@gimp : sep = separator()
jdoe_about :
  -gimp_logo "John Doe's Filters"

# ^ Please name your G'MIC commands with your 'username' as a prefix, so it avoids any conflicts with other external sources !

#@gimp Toy filter : jdoe_toyfilter, jdoe_toyfilter_preview(0)
#@gimp : Smoothness = float(0,0,10)
#@gimp : Mirror = choice("X","Y","XY")
#@gimp : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
#@gimp : sep = separator(), note = note("<small>Author : <i>First_name Last_name</i>.      Latest update: <i>2010/12/29</i>.</small>")
jdoe_toyfilter :
  -blur $1
  -if {$2==0} -mirror x
  -elif {$2==1} -mirror y
  -else -mirror xy
  -endif

jdoe_toyfilter_preview :
  -gimp_split_preview "-jdoe_toyfilter ${1--2}",$-1

#@gimp __
# ^ The line above allows to goes 2 levels up, so exit the 'Testing / John Doe' folders.
# Now, the parser considers you are located in the root path of the filter tree.
#----------------------------------------------------------------------------------------


# The filters below will go the the 'Various' folder.
# Put filters in regular locations only when you are sure that everything is working well,
# as many users will possibly have an experience with your filter !

#------------------------------------
#@gimp <b>Various</b>
#------------------------------------
#@gimp Extr'artistic : jdoe_xtrartistic, jdoe_xtrartistic_preview(1)
#@gimp : Smoothness = float(10,0,30)
#@gimp : Sharpness = float(100,0,500)
#@gimp : sep = separator(), Preview type = choice("Full","Forward horizontal","Forward vertical","Backward horizontal","Backward vertical")
#@gimp : sep = separator(), note = note("<small>Author : <i>First_name Last_name</i>.      Latest update: <i>2010/12/29</i>.</small>")
jdoe_xtrartistic :
  -blur $1 -sharpen {100*$2}

jdoe_xtrartistic_preview :
  -gimp_split_preview "-jdoe_xtrartistic ${1--2}",$-1

#@gimp _
# ^ The line above allows to goes 1 level up, so exit the 'Various' folder.
# Now, the parser considers you are located in the root path of the filter tree.
# .... You've got the idea ....

# A last important note : to be able to test your external filter source, copy it as
# '$HOME/.gmic' (for Unix-like OS) or '%APPDATA/gmic' (for Windows-like OS), and it
# will considered as 'local' external source by the plug-in. Once everything is working
# fine, you can now contribute and ask us to become an official external filter source !
# Thanks for your participation.


# Local Variables:
# mode: sh
# End:
#
# (End of G'MIC custom commands)